datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Restaurant {
  id            String   @id @default(uuid())
  name          String
  houseNumber   String
  street        String
  city          String
  postcode      String
  rating        Float?
  deliveryZones Json?
  menus         Menu[]
  orders        Order[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Menu {
  id           String     @id @default(uuid())
  name         String
  description  String?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  foods        Food[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Food {
  id          String       @id @default(uuid())
  name        String
  description String?
  basePrice   Float
  menu        Menu         @relation(fields: [menuId], references: [id], onDelete: Cascade)
  menuId      String
  options     FoodOption[]
  orderItems  OrderItem[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model FoodOption {
  id       String         @id @default(uuid())
  title    String
  multiple Boolean        @default(false)
  food     Food           @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId   String
  choices  OptionChoice[]
}

model OptionChoice {
  id         String     @id @default(uuid())
  label      String
  extraPrice Float      @default(0)
  option     FoodOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId   String
}

model Order {
  id           String      @id @default(uuid())
  customer     String
  phone        String
  address      Json
  status       String      @default("pending")
  etaMinutes   Int?
  items        OrderItem[]
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id       String @id @default(uuid())
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  String
  food     Food   @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId   String
  quantity Int
  selected Json?
}
